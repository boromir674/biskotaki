{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Biskotaki Gold Standard Documentation!","text":"<p>Biskotaki Gold Standard is an open source TODO</p>"},{"location":"#quick-start","title":"Quick-start","text":"<p>TODO</p>"},{"location":"build-process_DAG/","title":"Docker","text":""},{"location":"build-process_DAG/#docker-build-process-dag","title":"Docker Build Process DAG","text":"<p><code>docker build</code>  possible execution paths.</p> <p>Flow Chart, of how exection navigates docker stages (see --target of docker build).</p> <p>If you run <code>docker build .</code> the <code>target</code> used by default is the <code>default_with_demo</code> Stage in the Graph.</p> <p>Dockerfile: ./Dockerfile</p>"},{"location":"build-process_DAG/#dockerfile-flow-chart","title":"Dockerfile Flow Chart","text":"<p>Dockerfile: Dockerfile</p> <pre><code>graph TB;\n  python:3.9.16-slim-bullseye --&gt; builder\n  python:3.9.16-slim-bullseye --&gt; install\n  builder -. \"requirements.txt\" .-&gt; install\n</code></pre>"},{"location":"cicd/","title":"CI/CD","text":"","tags":["CICD"]},{"location":"cicd/#cicd-pipeline-as-github-action-workflow","title":"CICD Pipeline, as Github Action Workflow","text":"","tags":["CICD"]},{"location":"cicd/#variables-to-provide-for-var-context","title":"Variables to provide for <code>var</code> context","text":"<p>Flow Chart, of Jobs Dependencies in the Pipeline.</p> <p>config: ./.github/workflows/test.yaml</p> <pre><code>graph LR;\n  set_github_outputs --&gt; test_suite\n  test_suite --&gt; codecov_coverage_host\n  set_github_outputs --&gt; docker_build\n  test_suite --&gt; docker_build\n  set_github_outputs --&gt; check_which_git_branch_we_are_on\n  test_suite --&gt; pypi_publish\n  check_which_git_branch_we_are_on --&gt; pypi_publish\n  set_github_outputs --&gt; lint\n  set_github_outputs --&gt; docs\n  set_github_outputs --&gt; code_visualization\n</code></pre>","tags":["CICD"]},{"location":"cicd_mermaid/","title":"Cicd mermaid","text":"<pre><code>graph LR;\n  set_github_outputs --&gt; test_suite\n  test_suite --&gt; codecov_coverage_host\n  set_github_outputs --&gt; docker_build\n  test_suite --&gt; docker_build\n  set_github_outputs --&gt; check_which_git_branch_we_are_on\n  test_suite --&gt; pypi_publish\n  check_which_git_branch_we_are_on --&gt; pypi_publish\n  set_github_outputs --&gt; lint\n  set_github_outputs --&gt; docs\n  set_github_outputs --&gt; code_visualization\n</code></pre>"},{"location":"dockerfile_mermaid/","title":"Dockerfile mermaid","text":""},{"location":"dockerfile_mermaid/#dockerfile-flow-chart","title":"Dockerfile Flow Chart","text":"<p>Dockerfile: Dockerfile</p> <pre><code>graph TB;\n  python:3.9.16-slim-bullseye --&gt; builder\n  python:3.9.16-slim-bullseye --&gt; install\n  builder -. \"requirements.txt\" .-&gt; install\n</code></pre>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#cicd","title":"CICD","text":"<ul> <li>CI/CD</li> </ul>"},{"location":"dev_guides/","title":"How-To Guides for Development","text":"<p>This section includes practical, how-to guides, for a developer to achieve something. Guides on how to run tests against your code, how to publish to PyPI, how to build a Docker Image and publish it to Dockerhub, how to do <code>Static Code Analysis</code>, etc.</p>"},{"location":"dev_guides/#how-to-prevent-any-image-from-being-published-to-dockerhub","title":"How to prevent any Image from being published to Dockerhub","text":"<ol> <li> <p>Open your <code>.github/workflows/test.yaml</code>, and look for the Worfklow Variables</p> <p>Worfklow Variables are defined in the <code>env</code> section</p> </li> <li> <p>Check the value of the <code>DOCKER_JOB_ON</code> Worfklow Variable</p> <p></p> </li> <li> <p>If value is false, then we are OK.</p> </li> <li> <p>If not, set value to false*</p> <p><code>shell git add .github/workflows/test.yaml git commit \"ci: emphemerally prevent any Image Build and Dockerhub Publish\"</code></p> </li> </ol> <p>Now, it is guaranteed, that NO Dockerhub Publish will happen, by any Pipeline subsequent <code>trigger</code>, aka <code>git events</code> (ie <code>git push</code>) fired.</p> <p>Info: the <code>DOCKER_JOB_ON</code> is a top-level Gate to all Docker-related in CI. Only, if <code>DOCKER_JOB_ON</code> is true, any image build and publish can be ever considered.</p>"},{"location":"dev_guides/#references","title":"References","text":"<ul> <li>https://automated-workflows.readthedocs.io/en/main/guide_setup_cicd/</li> <li>https://automated-workflows.readthedocs.io/en/main/ref_docker/</li> </ul>"},{"location":"dev_guides/docker/","title":"Do Docker-related stuff","text":"Docker on CI    ## How to prevent any Image from being published to Dockerhub    1. Open your `.github/workflows/test.yaml`, and look for the **Worfklow Variables**        **Worfklow Variables** are defined in the `env` *section*    2. Check the *value* of the `DOCKER_JOB_ON` **Worfklow Variable**        [this is line is not rendered; markdown comment]: #        ![Docker OFF](../assets/docker_off.png)    3. If *value* is **false**, then we are OK.    4. If not, set value* to **false**        ```shell       git add .github/workflows/test.yaml       git commit \"ci: emphemerally prevent any Image Build and Dockerhub Publish\"       ```    Now, it is **guaranteed**, that **NO** Dockerhub Publish will happen,   by any Pipeline subsequent `trigger`, aka `git events` (ie `git push`) fired.    **Info**: the `DOCKER_JOB_ON` is a top-level Gate to all Docker-related in CI.   Only, if `DOCKER_JOB_ON` is **true**, any image build and publish can be ever considered."},{"location":"dev_guides/docker/#references","title":"References","text":"<ul> <li>https://automated-workflows.readthedocs.io/en/main/guide_setup_cicd</li> <li>https://automated-workflows.readthedocs.io/en/main/ref_docker</li> </ul>"},{"location":"reference/CLI/","title":"CLI Reference","text":"<p>This page provides documentation for our command line tools.</p>"},{"location":"reference/CLI/#main","title":"main","text":"<p>TODO Write this content that gets renders when invoking with --help flag!</p> <p>Eg: Create a Project from the project template.</p> <p>Cookiecutter Python Package is Free/Libre Open Source Software. If you would like to get in touch, please see https://github.com/boromir674/cookiecutter-python-package.</p> <p>Usage:</p> <pre><code>main [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -V, --version  Show the version and exit.\n  -v, --verbose  Print debug information\n  --help         Show this message and exit.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>biskotakigold<ul> <li>_logging</li> <li>cli</li> </ul> </li> <li>CLI</li> </ul>"},{"location":"reference/biskotakigold/","title":"biskotakigold","text":""},{"location":"reference/biskotakigold/_logging/","title":"_logging","text":"<p>Set up Application Logs</p> <p>This module defines how the emitted application logs are handled and where they are written/streamed. The application logs are written in full details (ie with timestamps) to a file and also streamed to the console in a more concise format.</p>"},{"location":"reference/biskotakigold/_logging/#biskotakigold._logging--consoleterminal-log","title":"Console/Terminal Log:","text":"<pre><code>- We Stream Logs of INFO (and above) Level on Console's stderr\n- The rendered Log format is: &lt;logger name&gt;: &lt;log level&gt; &lt;log message&gt;\n</code></pre>"},{"location":"reference/biskotakigold/_logging/#biskotakigold._logging--disk-file-log","title":"Disk File Log:","text":"<pre><code>- we Write Logs of ALL Levels on a Disk File\n- The rendered Log format is: &lt;timestamp&gt; &lt;logger name&gt;: &lt;log level&gt; &lt;log message&gt;\n- The FILE_TARGET_LOGS, variable (see below), defines the path to the log file\n</code></pre> <p>Log Levels: - CRITICAL - ERROR - WARNING - INFO - DEBUG</p> Usage <p>Do a 'from . import _logging' in the root init.py of your package and all submodules 'inherit' the logging configuration</p>"},{"location":"reference/biskotakigold/cli/","title":"cli","text":"<p>Main <code>biskotakigold</code> CLI.</p>"},{"location":"reference/biskotakigold/cli/#biskotakigold.cli.main","title":"<code>main(verbose)</code>","text":"<p>TODO Write this content that gets renders when invoking with --help flag!</p> <p>Eg: Create a Project from the project template.</p> <p>Cookiecutter Python Package is Free/Libre Open Source Software. If you would like to get in touch, please see https://github.com/boromir674/cookiecutter-python-package.</p> Source code in <code>src/biskotakigold/cli.py</code> <pre><code>@click.command(context_settings=dict(help_option_names=[u'-h', u'--help']))\n@click.version_option(__version__, u'-V', u'--version', message=version_msg())\n@click.option('-v', '--verbose', is_flag=True, help='Print debug information', default=False)\ndef main(\n    verbose,\n):\n    \"\"\"TODO Write this content that gets renders when invoking with --help flag!\n\n    Eg:\n    Create a Project from the project template.\n\n    Cookiecutter Python Package is Free/Libre Open Source Software. If you would\n    like to get in touch, please see\n    https://github.com/boromir674/cookiecutter-python-package.\n    \"\"\"\n    try:\n        pass\n    except Exception as error:\n        click.echo(error)\n        sys.exit(1)\n</code></pre>"},{"location":"reference/biskotakigold/cli/#biskotakigold.cli.version_msg","title":"<code>version_msg()</code>","text":"<p>biskotakigold version, location and Python version.</p> <p>Get message about biskotakigold version, location and Python version.</p> Source code in <code>src/biskotakigold/cli.py</code> <pre><code>def version_msg():\n    \"\"\"biskotakigold version, location and Python version.\n\n    Get message about biskotakigold version, location\n    and Python version.\n    \"\"\"\n    python_version = sys.version[:3]\n    message = u\"Biskotaki Gold Standard %(version)s from {} (Python {})\"\n    location = os.path.dirname(this_file_location)\n    return message.format(location, python_version)\n</code></pre>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#cicd","title":"CICD","text":"<ul> <li>CI/CD</li> </ul>"}]}